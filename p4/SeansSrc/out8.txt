==8474== Memcheck, a memory error detector
==8474== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==8474== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==8474== Command: airline.out
==8474== 

ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Flt# Origin               Destination
201  Reno                 San Francisco
265  Reno                 Los Angeles
552  Stockton             Reno
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number (0 = exit): Please enter the name of the passenger: ROW# AB
 1   XX
 2   XX
 3   XX
 4   XX
 5   XX
 6   X-
 7   X-

X = reserved.

Please enter the row of the seat you wish to reserve: Please enter the seat letter you wish to reserve: ==8474== Syscall param write(buf) points to uninitialised byte(s)
==8474==    at 0x57C9280: __write_nocancel (in /usr/lib64/libc-2.21.so)
==8474==    by 0x4EE56E5: ??? (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x4F21AD6: std::basic_filebuf<char, std::char_traits<char> >::_M_convert_to_external(char*, long) (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x4F21F16: std::basic_filebuf<char, std::char_traits<char> >::overflow(int) (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x4F21D3A: std::basic_filebuf<char, std::char_traits<char> >::_M_terminate_output() (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x4F24FFA: std::basic_filebuf<char, std::char_traits<char> >::close() (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x4F26EE4: std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream() (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x403018: Plane::addPassenger(int) (plane.cpp:109)
==8474==    by 0x4016FA: Flight::addPassenger() const (flight.cpp:13)
==8474==    by 0x401FBE: Flights::addPassenger() const (flights.cpp:62)
==8474==    by 0x402781: main (main.cpp:61)
==8474==  Address 0x5abb7f5 is 21 bytes inside a block of size 8,192 alloc'd
==8474==    at 0x4C297FD: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==8474==    by 0x4F21987: std::basic_filebuf<char, std::char_traits<char> >::_M_allocate_internal_buffer() (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x4F25BD1: std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode) (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x4F26687: std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(char const*, std::_Ios_Openmode) (in /usr/lib64/libstdc++.so.6.0.21)
==8474==    by 0x402F54: Plane::addPassenger(int) (plane.cpp:109)
==8474==    by 0x4016FA: Flight::addPassenger() const (flight.cpp:13)
==8474==    by 0x401FBE: Flights::addPassenger() const (flights.cpp:62)
==8474==    by 0x402781: main (main.cpp:61)
==8474== 

ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Flt# Origin               Destination
201  Reno                 San Francisco
265  Reno                 Los Angeles
552  Stockton             Reno
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number (0 = exit): Please enter the name of the passenger: ROW# AB
 1   XX
 2   XX
 3   XX
 4   XX
 5   XX
 6   X-
 7   XX

X = reserved.

Please enter the row of the seat you wish to reserve: Please enter the seat letter you wish to reserve: 
ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Flt# Origin               Destination
201  Reno                 San Francisco
265  Reno                 Los Angeles
552  Stockton             Reno
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number (0 = exit): We are sorry but Flight #201 is full.

ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Existing Flights:

Flt# Origin               Destination
201  Reno                 San Francisco
265  Reno                 Los Angeles
552  Stockton             Reno
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number of passenger remove: Passengers on Flight #583
Fong,Clare
Guerin,Justin
Genitiano,David
Ye,Eric
Huynh,Zane
Viswanathan,Long
Shelley,Jason
Brown,Jason
Hashemzadeh,Victor
Alabanza,Alison
Martin,Rochak
Dobbs,Alex
Huynh,Jeffrey
Nguyen,Jesse

Name of passenger to remove: 
ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Existing Flights:

Flt# Origin               Destination
201  Reno                 San Francisco
265  Reno                 Los Angeles
552  Stockton             Reno
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number to add: Origin: Destination: Rows: Width: 
ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Flt# Origin               Destination
201  Reno                 San Francisco
265  Reno                 Los Angeles
552  Stockton             Reno
553  Davis                San Diego
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number (0 = exit): ==8474== Conditional jump or move depends on uninitialised value(s)
==8474==    at 0x402E5F: Plane::addPassenger(int) (plane.cpp:87)
==8474==    by 0x4016FA: Flight::addPassenger() const (flight.cpp:13)
==8474==    by 0x401FBE: Flights::addPassenger() const (flights.cpp:62)
==8474==    by 0x402781: main (main.cpp:61)
==8474== 
Please enter the name of the passenger: ROW# ABCDEFGH
 1   --------
 2   --------
 3   --------

X = reserved.

Please enter the row of the seat you wish to reserve: Please enter the seat letter you wish to reserve: 
ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Existing Flights:

Flt# Origin               Destination
201  Reno                 San Francisco
265  Reno                 Los Angeles
552  Stockton             Reno
553  Davis                San Diego
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number to remove: ==8474== Mismatched free() / delete / delete []
==8474==    at 0x4C2A184: operator delete(void*) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==8474==    by 0x402CAF: Plane::~Plane() (plane.cpp:57)
==8474==    by 0x40181F: Flight::~Flight() (flight.cpp:24)
==8474==    by 0x4023F3: Flights::removeFlight() (flights.cpp:148)
==8474==    by 0x4027AB: main (main.cpp:64)
==8474==  Address 0x5ab41c0 is 0 bytes inside a block of size 8 alloc'd
==8474==    at 0x4C297FD: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==8474==    by 0x402AE0: Plane::Plane(std::basic_ifstream<char, std::char_traits<char> >&, int) (plane.cpp:30)
==8474==    by 0x401AB3: Flight::readFlight(std::basic_ifstream<char, std::char_traits<char> >&) (flight.cpp:59)
==8474==    by 0x40226E: Flights::readFlights() (flights.cpp:123)
==8474==    by 0x402742: main (main.cpp:56)
==8474== 

ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: Flt# Origin               Destination
201  Reno                 San Francisco
552  Stockton             Reno
553  Davis                San Diego
583  Reno                 Sacramento
815  Sacramento           Stockton

Flight number (0 = exit): Please enter the name of the passenger: ROW# ABCDEFGH
 1   --------
 2   -------X
 3   --------

X = reserved.

Please enter the row of the seat you wish to reserve: Please enter the seat letter you wish to reserve: 
ECS Flight Reservation Menu
0. Exit.
1. Add Passenger.
2. Remove Passenger.
3. Add Flight.
4. Remove Flight.

Please enter your choice: ==8474== Mismatched free() / delete / delete []
==8474==    at 0x4C2A184: operator delete(void*) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==8474==    by 0x402CAF: Plane::~Plane() (plane.cpp:57)
==8474==    by 0x40181F: Flight::~Flight() (flight.cpp:24)
==8474==    by 0x401DD9: Flights::~Flights() (flights.cpp:21)
==8474==    by 0x4027BF: main (main.cpp:54)
==8474==  Address 0x5ab6900 is 0 bytes inside a block of size 8 alloc'd
==8474==    at 0x4C297FD: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
==8474==    by 0x402AE0: Plane::Plane(std::basic_ifstream<char, std::char_traits<char> >&, int) (plane.cpp:30)
==8474==    by 0x401AB3: Flight::readFlight(std::basic_ifstream<char, std::char_traits<char> >&) (flight.cpp:59)
==8474==    by 0x40226E: Flights::readFlights() (flights.cpp:123)
==8474==    by 0x402742: main (main.cpp:56)
==8474== 
Goodbye.
==8474== 
==8474== HEAP SUMMARY:
==8474==     in use at exit: 72,704 bytes in 1 blocks
==8474==   total heap usage: 130 allocs, 129 frees, 380,232 bytes allocated
==8474== 
==8474== LEAK SUMMARY:
==8474==    definitely lost: 0 bytes in 0 blocks
==8474==    indirectly lost: 0 bytes in 0 blocks
==8474==      possibly lost: 0 bytes in 0 blocks
==8474==    still reachable: 72,704 bytes in 1 blocks
==8474==         suppressed: 0 bytes in 0 blocks
==8474== Rerun with --leak-check=full to see details of leaked memory
==8474== 
==8474== For counts of detected and suppressed errors, rerun with: -v
==8474== Use --track-origins=yes to see where uninitialised values come from
==8474== ERROR SUMMARY: 44 errors from 4 contexts (suppressed: 0 from 0)
